/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */

import { readFile, writeFile } from 'fs-extra';
import { minify as htmlMinifier } from 'html-minifier-terser';
import { minify as jsMinifier, MinifyOptions } from 'terser';

const minifyJsOptions: MinifyOptions = {
  keep_classnames: true,
  keep_fnames: true,
  format: {
    comments: false
  }
};

async function minifyJs(content: string): Promise<string> {
  return jsMinifier(content, minifyJsOptions).then(({ code }) => code || '');
}

async function minifyHtml(content: string): Promise<string> {
  return htmlMinifier(content, {
    collapseBooleanAttributes: true,
    collapseWhitespace: false,
    decodeEntities: true,
    includeAutoGeneratedTags: false,
    minifyCSS: true,
    minifyJS: minifyJsOptions,
    minifyURLs: true,
    processScripts: ['text/html'],
    ignoreCustomComments: [],
    removeComments: false,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    trimCustomFragments: true,
    useShortDoctype: true
  });
}

async function minifyJson(content: string): Promise<string> {
  let json: Record<string, unknown> = {};
  try {
    json = JSON.parse(content);
    if (json.$schema) {
      // $schema is only needed for autocompletion
      delete json.$schema;
    }
    return JSON.stringify(json);
  } catch {
    return content;
  }
}

export async function minifyFile(filePath: string, type: 'svg' | 'html' | 'json' | 'js' | string): Promise<void> {
  const content = await readFile(filePath, 'utf8');

  let minified: Promise<string>;
  switch (type) {
    case 'svg':
    case 'html':
      minified = minifyHtml(content);
      break;
    case 'js':
      minified = minifyJs(content);
      break;
    case 'json':
      minified = minifyJson(content);
      break;
    default:
      throw new Error(`Unknown extension: ${type}`);
  }
  const result = await minified;
  await writeFile(filePath, result);
}
